{"version":3,"sources":["assets/images/bg.png","helpers/gameHelpers.js","helpers/tetrominos.js","hooks/usePlayer.js","hooks/useStage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledCell.js","components/Cell.js","components/styles/StyledStage.js","components/Stage.js","components/styles/StyledStartButton.js","components/StartButton.js","components/styles/StyledTetris.js","components/Tetris.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","usePlayer","useState","collided","setPlayer","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","resetPlayer","useCallback","STAGE_WIDTH","prev","clonedPlayer","JSON","parse","stringify","offset","useStage","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","cell","forEach","value","reduce","ack","findIndex","unshift","push","sweepRows","StyledDisplay","styled","div","props","gameOver","Display","text","StyledCell","type","React","memo","console","log","StyledStage","height","width","Stage","key","StyledStartButton","button","StartButton","callback","onClick","StyledTetrisWrapper","bgImage","StyledTetris","Tetris","dropTime","setDropTime","setGameOver","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","move","keyCode","role","tabIndex","onKeyDown","e","onKeyUp","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.107e4a38.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () => {\r\n  return Array.from(Array(STAGE_HEIGHT), () =>\r\n    new Array(STAGE_WIDTH).fill([0, \"clear\"])\r\n  );\r\n};\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n  for (let y = 0; y < player.tetromino.length; y += 1) {\r\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n      // 1. Check that we're on an actual Tetromino cell\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          // 2. Check that our move is inside the game areas height (y)\r\n          // We shouldn't go through the bottom of the play area\r\n          !stage[y + player.pos.y + moveY] ||\r\n          // 3. Check that our move is inside the game areas width (x)\r\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n          // 4. Check that the cell wer'e moving to isn't set to clear\r\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n            \"clear\"\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n","export const TETROMINOS = {\r\n  0: { shape: [[0]], color: \"0, 0, 0\" },\r\n  I: {\r\n    shape: [[0, \"I\", 0, 0], [0, \"I\", 0, 0], [0, \"I\", 0, 0], [0, \"I\", 0, 0]],\r\n    color: \"80, 227, 230\"\r\n  },\r\n  J: {\r\n    shape: [[0, \"J\", 0], [0, \"J\", 0], [\"J\", \"J\", 0]],\r\n    color: \"36, 95, 223\"\r\n  },\r\n  L: {\r\n    shape: [[0, \"L\", 0], [0, \"L\", 0], [0, \"L\", \"L\"]],\r\n    color: \"223, 173, 36\"\r\n  },\r\n  O: {\r\n    shape: [[\"O\", \"O\"], [\"O\", \"O\"]],\r\n    color: \"223, 217, 36\"\r\n  },\r\n  S: {\r\n    shape: [[0, \"S\", \"S\"], [\"S\", \"S\", 0], [0, 0, 0]],\r\n    color: \"48, 211, 56\"\r\n  },\r\n  T: {\r\n    shape: [[0, 0, 0], [\"T\", \"T\", \"T\"], [0, \"T\", 0]],\r\n    color: \"132, 61, 198\"\r\n  },\r\n  Z: {\r\n    shape: [[\"Z\", \"Z\", 0], [0, \"Z\", \"Z\"], [0, 0, 0]],\r\n    color: \"227, 78, 78\"\r\n  }\r\n};\r\n\r\nexport const randomTetromino = () => {\r\n  const tetrominos = \"IJLOSTZ\";\r\n  const randTetromino =\r\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n  return TETROMINOS[randTetromino];\r\n};\r\n","import { useCallback, useState } from \"react\";\r\nimport { checkCollision, STAGE_WIDTH } from \"../helpers/gameHelpers\";\r\nimport { randomTetromino, TETROMINOS } from \"../helpers/tetrominos\";\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false\r\n  });\r\n\r\n  const rotate = (matrix, dir) => {\r\n    // Make the rows to become cols (transpose)\r\n    const rotatedTetro = matrix.map((_, index) =>\r\n      matrix.map(col => col[index])\r\n    );\r\n    // Reverse each row to get a rotated matrix\r\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\r\n    return rotatedTetro.reverse();\r\n  };\r\n\r\n  const playerRotate = (stage, dir) => {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n    const pos = clonedPlayer.pos.x;\r\n    let offset = 1;\r\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset;\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotate(clonedPlayer.tetromino, -dir);\r\n        clonedPlayer.pos.x = pos;\r\n        return;\r\n      }\r\n    }\r\n    setPlayer(clonedPlayer);\r\n  };\r\n\r\n  const updatePlayerPos = ({ x, y, collided }) => {\r\n    setPlayer(prev => ({\r\n      ...prev,\r\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n      collided\r\n    }));\r\n  };\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false\r\n    });\r\n  }, []);\r\n\r\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { createStage } from \"../helpers/gameHelpers\";\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n\r\n    const sweepRows = newStage =>\r\n      newStage.reduce((ack, row) => {\r\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n          setRowsCleared(prev => prev + 1);\r\n          ack.unshift(new Array(newStage[0].length).fill([0, \"clear\"]));\r\n          return ack;\r\n        }\r\n        ack.push(row);\r\n        return ack;\r\n      }, []);\r\n\r\n    const updateStage = prevStage => {\r\n      // First flush the stage\r\n      const newStage = prevStage.map(row =>\r\n        row.map(cell => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\r\n      );\r\n\r\n      // Then draw the tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? \"merged\" : \"clear\"}`\r\n            ];\r\n          }\r\n        });\r\n      });\r\n      // Then check if we collided\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n      return newStage;\r\n    };\r\n\r\n    setStage(prev => updateStage(prev));\r\n  }, [player, resetPlayer]);\r\n\r\n  return [stage, setStage, rowsCleared];\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledDisplay = styled.div`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  border: 4px solid #333;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  color: ${props => (props.gameOver ? \"red\" : \"#999\")};\r\n  background: #000;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 0.8rem;\r\n`;\r\n","import React from \"react\";\r\nimport { StyledDisplay } from \"./styles/StyledDisplay\";\r\n\r\nconst Display = ({ gameOver, text }) => {\r\n  return <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>;\r\n};\r\n\r\nexport default Display;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledCell = styled.div`\r\n  width: auto;\r\n  background: rgba(${props => props.color}, 0.8);\r\n  border: ${props => (props.type === 0 ? \"0px solid\" : \"4px solid\")};\r\n  border-bottom-color: rgba(${props => props.color}, 0.1);\r\n  border-right-color: rgba(${props => props.color}, 1);\r\n  border-top-color: rgba(${props => props.color}, 1);\r\n  border-left-color: rgba(${props => props.color}, 0.3);\r\n`;\r\n","import React from \"react\";\r\nimport { StyledCell } from \"./styles/StyledCell\";\r\nimport { TETROMINOS } from \"../helpers/tetrominos\";\r\n\r\n// React.memo makes sure we only re-render the changed cells\r\nconst Cell = ({ type }) => (\r\n  <StyledCell type={type} color={TETROMINOS[type].color}>\r\n    {console.log(\"rerender cell\")}\r\n  </StyledCell>\r\n);\r\n\r\nexport default React.memo(Cell);\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledStage = styled.div`\r\n  display: grid;\r\n  grid-template-rows: repeat(\r\n    ${props => props.height},\r\n    calc(25vw / ${props => props.width})\r\n  );\r\n  grid-template-columns: repeat(${props => props.width}, 1fr);\r\n  grid-gap: 1px;\r\n  border: 2px solid #333;\r\n  width: 100%;\r\n  max-width: 25vw;\r\n  background: #111;\r\n`;\r\n","import React from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport { StyledStage } from \"./styles/StyledStage\";\r\n\r\nconst Stage = ({ stage }) => {\r\n  return (\r\n    <StyledStage width={stage[0].length} height={stage.length}>\r\n      {stage.map(row =>\r\n        row.map((cell, x) => <Cell key={x} type={cell[0]}></Cell>)\r\n      )}\r\n    </StyledStage>\r\n  );\r\n};\r\n\r\nexport default Stage;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledStartButton = styled.button`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  border: none;\r\n  color: white;\r\n  background: #333;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 0.8rem;\r\n  outline: none;\r\n  cursor: pointer;\r\n`;\r\n","import React from \"react\";\r\nimport { StyledStartButton } from \"./styles/StyledStartButton\";\r\n\r\nconst StartButton = ({ callback }) => {\r\n  return <StyledStartButton onClick={callback}>Start Game</StyledStartButton>;\r\n};\r\n\r\nexport default StartButton;\r\n","import styled from \"styled-components\";\r\nimport bgImage from \"../../assets/images/bg.png\";\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: url(${bgImage}) #000;\r\n  background-size: cover;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 40px;\r\n  margin: 0 auto;\r\n  max-width: 900px;\r\n\r\n  aside {\r\n    width: 100%;\r\n    max-width: 200px;\r\n    display: block;\r\n    padding: 0 20px;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport { checkCollision, createStage } from \"../helpers/gameHelpers\";\r\nimport { useGameStatus } from \"../hooks/useGameStatus\";\r\nimport { useInterval } from \"../hooks/useInterval\";\r\nimport { usePlayer } from \"../hooks/usePlayer\";\r\nimport { useStage } from \"../hooks/useStage\";\r\nimport Display from \"./Display\";\r\nimport Stage from \"./Stage\";\r\nimport StartButton from \"./StartButton\";\r\nimport { StyledTetris, StyledTetrisWrapper } from \"./styles/StyledTetris\";\r\n\r\nconst Tetris = () => {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\r\n    rowsCleared\r\n  );\r\n\r\n  console.log(\"re-render\");\r\n\r\n  const movePlayer = dir => {\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 });\r\n    }\r\n  };\r\n\r\n  const keyUp = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      // Activate the interval again when user releases down arrow.\r\n      if (keyCode === 40) {\r\n        setDropTime(1000 / (level + 1));\r\n      }\r\n    }\r\n  };\r\n\r\n  const startGame = () => {\r\n    // Reset everything\r\n    setStage(createStage());\r\n    setDropTime(1000);\r\n    resetPlayer();\r\n    setScore(0);\r\n    setLevel(0);\r\n    setRows(0);\r\n    setGameOver(false);\r\n  };\r\n\r\n  const drop = () => {\r\n    // Increase level when player has cleared 10 rows\r\n    if (rows > (level + 1) * 10) {\r\n      setLevel(prev => prev + 1);\r\n      // Also increase speed\r\n      setDropTime(1000 / (level + 1) + 200);\r\n    }\r\n\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false });\r\n    } else {\r\n      // Game over!\r\n      if (player.pos.y < 1) {\r\n        console.log(\"GAME OVER!!!\");\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }\r\n      updatePlayerPos({ x: 0, y: 0, collided: true });\r\n    }\r\n  };\r\n\r\n  const dropPlayer = () => {\r\n    // We don't need to run the interval when we use the arrow down to\r\n    // move the tetromino downwards. So deactivate it for now.\r\n    setDropTime(null);\r\n    drop();\r\n  };\r\n\r\n  // This one starts the game\r\n  // Custom hook by Dan Abramov\r\n  useInterval(() => {\r\n    drop();\r\n  }, dropTime);\r\n\r\n  const move = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 37) {\r\n        movePlayer(-1);\r\n      } else if (keyCode === 39) {\r\n        movePlayer(1);\r\n      } else if (keyCode === 40) {\r\n        dropPlayer();\r\n      } else if (keyCode === 38) {\r\n        playerRotate(stage, 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StyledTetrisWrapper\r\n      role=\"button\"\r\n      tabIndex=\"0\"\r\n      onKeyDown={e => move(e)}\r\n      onKeyUp={keyUp}\r\n    >\r\n      <StyledTetris>\r\n        <Stage stage={stage} />\r\n        <aside>\r\n          {gameOver ? (\r\n            <Display gameOver={gameOver} text=\"Game Over\" />\r\n          ) : (\r\n            <div>\r\n              <Display text={`Score: ${score}`} />\r\n              <Display text={`rows: ${rows}`} />\r\n              <Display text={`Level: ${level}`} />\r\n            </div>\r\n          )}\r\n          <StartButton callback={startGame} />\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  );\r\n};\r\n\r\nexport default Tetris;\r\n","import { useCallback, useEffect, useState } from \"react\";\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n  const [score, setScore] = useState(0);\r\n  const [rows, setRows] = useState(0);\r\n  const [level, setLevel] = useState(0);\r\n\r\n  const linePoints = [40, 100, 300, 1200];\r\n\r\n  const calcScore = useCallback(() => {\r\n    // We have score\r\n    if (rowsCleared > 0) {\r\n      // This is how original Tetris score is calculated\r\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n      setRows(prev => prev + rowsCleared);\r\n    }\r\n  }, [level, linePoints, rowsCleared]);\r\n\r\n  useEffect(() => {\r\n    calcScore();\r\n  }, [calcScore, rowsCleared, score]);\r\n\r\n  return [score, setScore, rows, setRows, level, setLevel];\r\n};\r\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport Tetris from \"./components/Tetris\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Tetris></Tetris>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}